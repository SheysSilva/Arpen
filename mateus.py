# Generated by Selenium IDE
# -*- coding: UTF-8 -*- 
import pytest
import time
import json
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from datetime import datetime
from selenium.common.exceptions import *
from random import randint
from config import getKeys, setUrl, getUrl
from generateKey import generate
from analize import verify


chrome_options = Options()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')
Linux = '/snap/bin/chromium.chromedriver'
Windows = 'C:\\Users\\Sheilla.CONTAGIL2\\Documents\\07. Chrome Driver\\chromedriver_win32\\chromedriver.exe'
driver = webdriver.Chrome(Linux)

type_file = ''
path_down = '/home/sheylong/Downloads/'

def logar():
	driver.get("https://www4.receita.pb.gov.br/atf/")
	driver.set_window_size(1296, 704)
	driver.switch_to.frame(1)
	driver.find_element(By.ID, "login").send_keys('fra13582')
	driver.find_element(By.NAME, "edtDsSenha").click()
	driver.find_element(By.NAME, "edtDsSenha").send_keys('fiscal3336*')
	time.sleep(2)

	driver.find_element(By.NAME, "btnAvancar").click()
	time.sleep(5)

def addKey(nfces, file):
	for nfce in nfces:
		print(nfce)
		file.write(str(nfce)+"\n")
		driver.find_element(By.NAME, "edtNrChaveAcesso").send_keys(nfce)
		driver.find_element(By.NAME, "btnAdicionar").click()

def main(nfces, file):
	logar()
	nfce = 'https://www4.receita.pb.gov.br/atf/fis/FISf_ConsultaGenericaEmitenteNFCe.do?limparSessao=true'
	driver.get(nfce)

	addKey(nfces, file)

	select = Select(driver.find_element_by_name('cmbTpExibicao'))
	select.select_by_visible_text(type_file)

	driver.find_element(By.NAME, 'btnConsultar').click() 

	
def message(i):
	tbody =  driver.find_elements_by_css_selector("tbody")
	strg = 'FIS_1484 - Consulta de NFC-e por Emitente '
	count = 0
	for tr in tbody:
		count+=1
		if count >= 3:
			list = tr.text.split()
			txt = ''
			if len(list) >= 7:
				for i in range(7):
					txt = txt + str(list[i]) + " "

				ID = driver.find_element_by_css_selector('a').get_attribute('href').encode("utf-8");
				print(ID)
				if ID == "":
					message(i)

def listIds():
	Ids = []
	table_id = driver.find_element(By.CLASS_NAME, 'fontePadrao')
	rows = table_id.find_elements(By.TAG_NAME, "a") 
	for row in rows:
	    id_ = row.get_attribute('href').encode("utf-8")
	    if len(id_)>0:
		    ID = id_.split("'")
		    if not ID[1] in Ids:
		    	Ids.append(ID[1])
	return Ids	

def download(id):    	
	link = 'https://www4.receita.pb.gov.br/atf/seg/SEGf_MinhasMensagens.do?hidsqMensagem='+id
	driver.get(link)
	table_id = driver.find_element(By.CLASS_NAME, 'fontePadrao')
	el = table_id.find_element(By.TAG_NAME, "a")
	id_son = el.get_attribute('href').encode("utf-8")
	ID_son = id_son.split("'")[1]
	ID_son = int(ID_son)-1
	print ID_son
	link = 'https://www4.receita.pb.gov.br/atf/seg/SEGf_LerMensagem.do?hidsqMensagem='+str(ID_son)+'&sqMensagemPai='+id
	driver.get(link)
	time.sleep(5)
	driver.find_element(By.TAG_NAME, 'a').click();

def removeDirs(dirs):
	for dire in dirs:
		if '.zip' in str(dire):
			os.remove(path_down+str(dire))

def verify():
	downloads = []
	notDown = []
	while True:
		try:
			logar()
		except (TimeoutException, NoSuchElementException, ElementClickInterceptedException, WebDriverException) as e:
			logar()
			print(str(e))
		driver.get('https://www4.receita.pb.gov.br/atf/seg/SEGf_MinhasMensagens.do?limparSessao=true')
		Ids = listIds()
		print Ids
		for id in Ids:
			if len(downloads) >= 5:
				break
			print 'P: ' + str(id)
			try:
				if id not in downloads:
					download(id)
				downloads.append(id)
			except (TimeoutException, NoSuchElementException, ElementClickInterceptedException, WebDriverException) as e:
				notDown.append(id)
				print(str(e))

		list_Down = sorted(set(notDown))
		print('FINISH')
		print('downloads: ')
		print(downloads)
		print('not downloads:')
		print(list_Down)
		dirs = os.listdir(path_down)
		if (len(dirs)-2) == 0:
			return False
		else:
			removeDirs(dirs)
			return True

print('Selecione o tipo de arquivo para donwload: \n1. HTML\n2. XML\n3. TXT(produtos)\n4.TXT')
type_file = "XML"
cnpj = '03766525000473'
number = 1000
serie = 101
month = 10
file = open('src/historic/historic.txt','w')
count = 0
while month < 12:
	nfces = []
	if count == 5:
		if verify():
			month += 1 
			if month > 12:
				serie += 1
				month = 9
				number = 1

	for i in range(1, 65):
		if number == 999999999:
			number = 1
			serie = serie + 1

		if serie == 126:
			serie = 101
			month +=1

		key = generate(cnpj, number, serie, month)
		nfces.append(key)
		number = number+1

	now = datetime.now()
	print(now)
	print('Quantidade de arquivos: ',len(nfces))
	print(nfces)
	err = True
	if len(nfces) > 0:
		while err:
			try:
				file.write(str(now)+"\n")
				main(nfces, file)
				err = False
			except (NoSuchElementException, TimeoutException, WebDriverException):
				err = True
				print('err')
		now = datetime.now()
		print(now)
	else:
		seconds = ((randint(15, 21))%7)+10
		print(seconds)
		time.sleep(seconds)

	count+=1




